Node.js => arquitectura de patr√≥n MVC (Model-View-Controller). 


Routes: 
  Routes define the endpoints of your application and map them to specific controllers. They determine how the application responds to various HTTP methods (GET, POST, PUT, DELETE) and URLs. Routes act as a layer of abstraction between the client's request and the corresponding controller that will handle it. They typically handle tasks like parsing request parameters, authentication, and authorization.

Middleware: 
  Middleware functions are functions that have access to the request and response objects in the application's request-response cycle. They can modify the request or response objects, execute additional code, and pass control to the next middleware function in the chain. Middleware is often used for tasks such as authentication, logging, error handling, parsing request bodies, or any other custom processing that needs to be done before or after the main request handling.

Models:
  Models represent the data structures or business logic of your application. They define how data should be structured, validated, and manipulated. Models often interact with a database or any other persistence layer to retrieve or update data. They encapsulate the application's data-related functionality.

Controllers:
  Controllers handle the logic and flow of the application. They receive requests from the client, interact with models to fetch or update data, and determine the appropriate response to send back to the client. Controllers act as the intermediary between the incoming requests and the models or services responsible for processing them.

Services:
  Services are responsible for encapsulating complex or reusable business logic that doesn't fit within a single model or controller. They handle specific tasks or operations that may require coordination between multiple models or external APIs. Services help keep your code modular and maintainable by separating concerns and promoting reusability.

Providers:
  Providers, in the context of Node.js projects, typically refer to modules or classes responsible for managing external services, libraries, or dependencies. They can handle tasks like connecting to a database, setting up authentication mechanisms, or configuring external APIs. Providers act as a bridge between your application and the external services it relies on.




Layout

- models/
  - indexModels.js
  - libraryModel.js
  - bookModel.js
  - userModel.js
- controllers/
  - indexControllers.js
  - libraryController.js
  - bookController.js
  - userController.js
- routes/
  - indexRoutes.js
  - libraryRoutes.js
  - bookRoutes.js
  - userRoutes.js
- services/
  - indexServices.js
  - libraryService.js
  - bookService.js
  - userService.js
- providers/
  - indexProvider.js
- middleware/
  -authMdw.js
- config/
  - dbConfig.js
- app.js
